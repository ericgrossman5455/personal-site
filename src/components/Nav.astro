---
import { Icon } from 'astro-icon';

import navData from '../data/navData';
---

<nav data-disable-anim aria-expanded="true">
	<button class="nav-toggle" title="Navigation" aria-label="Navigation" aria-controls="nav-panel">
		<span class="visually-hidden">Navigation</span>
		<Icon name="hamburger_menu" />
	</button>

	<div id="nav-panel">
		<div class="placeholder">
			<Icon name="hamburger_menu" />
		</div>

		<div class="directory">
			{
				navData.map((page) => (
					<a href={page.path} title={page.name} aria-label={page.name} data-nav-link>
						<span class="visually-hidden">{page.name}</span>
						<Icon name={page.name.toLowerCase()} />
					</a>
				))
			}
		</div>

		<button class="notifications" title="Notifications" aria-label="Notifications" data-nav-link>
			<span class="visually-hidden">Notifications</span>
			<Icon name="notifications" />
		</button>
	</div>
</nav>

<style is:global lang="scss">
	:root {
		--nav-width: 70px;
	}

	nav {
		$icon-width: 35px;
		$vert-padding: 20px;

		grid-area: nav;
		position: sticky;
		top: 0;
		height: calc(100vh);
		height: calc(100dvh);

		.nav-toggle {
			position: fixed;
			left: calc((var(--nav-width) - $icon-width) / 2);
			top: $vert-padding;
			z-index: 9999;
		}

		#nav-panel {
			display: flex;
			flex-direction: column;
			row-gap: 15px;
			padding: $vert-padding 0;
			align-items: center;
			justify-content: space-between;
			overflow-x: hidden;
			overflow-y: auto;
			line-height: 0;
			height: calc(100vh - $vert-padding * 2);
			height: calc(100dvh - $vert-padding * 2);
		}

		.placeholder {
			opacity: 0;
		}

		svg {
			width: $icon-width;
			fill: var(--glyph-standard);
		}

		button {
			line-height: 0;
		}

		.directory {
			display: flex;
			flex-direction: column;
			row-gap: 25px;

			a {
				$flush-left: calc((var(--nav-width) - $icon-width) / -2);
				position: relative;

				&:after {
					content: '';
					position: absolute;
					left: calc($flush-left - 1px);
					height: 100%;
					border-left: 1px solid var(--glyph-standard);
					transition: left 200ms ease-out;
				}

				// current page
				&:is([aria-current]) {
					opacity: 1;

					&:after {
						left: calc($flush-left + 4px);
					}

					&:hover:after {
						left: calc($flush-left + 5px);
					}
				}

				// inactive pages
				&:not([aria-current]) {
					opacity: 0.5;

					&:hover:after {
						left: calc($flush-left + 4px);
					}
				}
			}
		}
	}
</style>

<script>
	const navLinks = document.querySelectorAll('[data-nav-link]');
	const navToggle = document.querySelector('.nav-toggle');
	const nav = document.querySelector('nav');
	const navPanel = document.getElementById('nav-panel');
	const main = document.querySelector('main');
	const freezeElements = document.querySelectorAll('[data-nav-freeze]');
	const mobileBreakPoint = 600;

	// add aria-current attribute to current page anchor tag in nav
	navLinks.forEach((link) => {
		if (link.getAttribute('href') === window.location.pathname) {
			link.setAttribute('aria-current', 'page');
		}
	});

	function throttle(fn, wait) {
		var time = Date.now();

		return function () {
			if (time + wait - Date.now() < 0) {
				fn();
				time = Date.now();
			}
		};
	}

	function setExpandedNavAttributes() {
		if (document.body.clientWidth <= mobileBreakPoint) {
			freezeElements.forEach((el) => {
				const htmlEl = el as HTMLElement;
				const freezeWidth = htmlEl.offsetWidth.toString();
				const freezeHeight = htmlEl.offsetHeight.toString();
				htmlEl.style.width = `${freezeWidth}px`;
				htmlEl.style.height = `${freezeHeight}px`;
			});

			window.addEventListener('scroll', throttle(mobileNavAutoCollapse, 1000));
			main.addEventListener('click', attributeToggler);
		}

		nav.setAttribute('aria-expanded', 'true');
		navPanel.removeAttribute('aria-hidden');
		navPanel.classList.remove('display-none');
	}

	function setCollapsedNavAttributes() {
		const navAnimDuration =
			Number(
				window
					.getComputedStyle(document.querySelector('body'))
					.getPropertyValue('transition-duration')
					.replace(/[^0-9\.]+/g, '')
			) * 1000;

		setTimeout(() => {
			navPanel.classList.add('display-none');

			if (document.body.clientWidth <= mobileBreakPoint) {
				main.removeEventListener('click', attributeToggler);
				freezeElements.forEach((el) => {
					const htmlEl = el as HTMLElement;
					htmlEl.style.removeProperty('height');
					htmlEl.style.removeProperty('width');
				});
			}
		}, navAnimDuration);

		nav.setAttribute('aria-expanded', 'false');
		navPanel.setAttribute('aria-hidden', 'true');
	}

	// conditions for when nav attributes should adopt expanded/collapsed states
	function attributeToggler(setNavState) {
		const isNavExpanded = nav.getAttribute('aria-expanded');

		if (setNavState == 'collapseNav') {
			setCollapsedNavAttributes();
		} else if (setNavState == 'expandNav') {
			setExpandedNavAttributes();
		} else if (isNavExpanded === 'false') {
			setExpandedNavAttributes();
		} else {
			setCollapsedNavAttributes();
		}
	}

	function mediaQueryHandler() {
		const isNavExpanded = nav.getAttribute('aria-expanded');

		// removes data-disable-anim attribute to enable nav animations | related: 1
		setTimeout(() => {
			nav.removeAttribute('data-disable-anim');
		}, 0);

		// collapse nav when window shrinks to mobile width
		if (document.body.clientWidth <= mobileBreakPoint && isNavExpanded === 'true') {
			attributeToggler('collapseNav');
		}
	}

	function mobileNavAutoCollapse() {
		const isNavExpanded = nav.getAttribute('aria-expanded');

		if (document.body.clientWidth <= mobileBreakPoint && isNavExpanded === 'true') {
			setCollapsedNavAttributes();
		}
	}

	navToggle.addEventListener('click', throttle(attributeToggler, 300));
	window.addEventListener('resize', mediaQueryHandler);
	window.addEventListener('load', mediaQueryHandler);
</script>
