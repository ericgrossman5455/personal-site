---
import { Icon } from 'astro-icon/components';

import navData from '../data/navData';
import Crumbs from './Crumbs.astro';

const { crumbs } = Astro.props;
---

<nav aria-expanded="true" data-disable-mount-anim>
	<div class="top-bar">
		<button class="nav-toggle" title="Navigation" aria-label="Navigation" aria-controls="nav-panel">
			<span class="visually-hidden">Navigation</span>
			<Icon name="nav_toggle" />
		</button>
		<Crumbs crumbs={crumbs} />
	</div>

	<div id="nav-panel" class="">
		<div class="placeholder">
			<Icon name="nav_toggle" />
		</div>

		<div class="directory">
			{
				navData.map((page) => (
					<a href={page.path} title={page.name} aria-label={page.name} data-nav-link>
						<span class="visually-hidden">{page.name}</span>
						<Icon name={page.name.toLowerCase()} />
					</a>
				))
			}
		</div>

		<button class="contact" title="Contact" aria-label="Contact methods" data-nav-link>
			<span class="visually-hidden">Contact methods</span>
			<Icon name="contact" />
		</button>
	</div>
</nav>

<style is:global>
	:root {
		/* update value in JS too for Safari bug | rel:1 */
		--nav-anim-duration: 300ms;
	}
</style>

<style lang="scss">
	nav {
		$nav-width: 70px;
		$icon-width: 35px;
		$vert-padding: 20px;

		grid-area: nav;
		position: sticky;
		top: 0;
		width: $nav-width;
		height: calc(100vh);
		height: calc(100dvh);
		transition: width ease-in-out var(--nav-anim-duration);
		z-index: 100;

		&[aria-expanded='false'] {
			width: 0px;
		}

		@media only screen and (max-width: 600px) {
			&[data-disable-mount-anim] {
				width: 0px;
			}
		}

		.top-bar {
			z-index: 99;
			position: fixed;
			display: flex;
			max-width: 600px;
			top: $vert-padding;
			left: calc(($nav-width - $icon-width) / 2);
			margin-right: calc(($nav-width - $icon-width) / 2);
			padding-left: 3px;
			backdrop-filter: blur(10px);
			-webkit-backdrop-filter: blur(10px);
			border-radius: 5px;
		}

		#nav-panel {
			display: flex;
			flex-direction: column;
			row-gap: 15px;
			padding: $vert-padding 0;
			align-items: center;
			justify-content: space-between;
			overflow-x: hidden;
			overflow-y: auto;
			line-height: 0;
			height: calc(100vh - $vert-padding * 2);
			height: calc(100dvh - $vert-padding * 2);
		}

		.placeholder {
			opacity: 0;
		}

		svg {
			font-size: $icon-width;
			color: var(--glyph-standard);
		}

		button {
			line-height: 0;
		}

		.directory {
			display: flex;
			flex-direction: column;
			row-gap: 25px;

			a {
				$flush-left: calc(($nav-width - $icon-width) / -2);
				position: relative;

				&:after {
					content: '';
					position: absolute;
					top: 0;
					left: calc($flush-left - 1px);
					height: 100%;
					border-left: 1px solid var(--glyph-standard);
					transition: left 200ms ease-out;
				}

				// current page
				&:is([aria-current]) {
					opacity: 1;

					&:after {
						left: calc($flush-left + 4px);
					}

					&:hover:after {
						left: calc($flush-left + 5px);
					}
				}

				// inactive pages
				&:not([aria-current]) {
					opacity: 0.5;

					&:focus {
						opacity: 1;
					}

					&:hover:after {
						left: calc($flush-left + 4px);
					}
				}
			}
		}
	}
</style>

<script>
	import { browserDetect } from '../../public/scripts/global-scripts.js';

	const PrimaryGrid = document.getElementById('primary-grid');
	const Nav = document.querySelector('nav');
	const NavToggle = document.querySelector('.nav-toggle');
	const Crumbs = document.querySelector('.crumbs');
	const NavPanel = document.getElementById('nav-panel');
	const NavLinks = document.querySelectorAll('[data-nav-link]');
	const Main = document.querySelector('main');
	const Footer = document.querySelector('footer');
	const AllLinks = document.querySelectorAll('a');

	let _isContentFrozen = false;
	let _screenWidth;
	let _navAnimDuration;
	let _navAnimTimer;
	let _isNavExpanded;

	document.addEventListener('DOMContentLoaded', mount);
	window.addEventListener('pageshow', cacheCheck);

	function bindEvents() {
		window.addEventListener('resize', mediaQueryHandler);
		NavToggle.addEventListener('click', attributeToggler);
		NavLinks.forEach((link) => {
			link.addEventListener('click', navLinkClickHandler);
		});

		const NavLinksArray = Array.from(NavLinks);
		AllLinks.forEach((link) => {
			if (
				!NavLinksArray.includes(link) &&
				!link.hasAttribute('data-disable-unmount-anim') &&
				link.getAttribute('href') != '#'
			) {
				link.addEventListener('click', genericLinkHandler);
			}
		});
	}

	function mount() {
		setCurrentNavLink();
		mediaQueryHandler();
		Nav.removeAttribute('data-disable-mount-anim');
		getNavAnimDuration();
		bindEvents();
	}

	function setCurrentNavLink() {
		NavLinks.forEach((link) => {
			link.removeAttribute('aria-current');
			link.removeAttribute('aria-label');

			if (link.getAttribute('href') === '/' && window.location.pathname === '/') {
				link.setAttribute('aria-current', 'page');
				link.setAttribute('aria-label', 'scroll to top');
			}

			if (
				window.location.pathname.includes(link.getAttribute('href')) &&
				link.getAttribute('href') !== '/'
			) {
				link.setAttribute('aria-current', 'page');
				link.setAttribute('aria-label', 'scroll to top');
			}
		});
	}

	function mediaQueryHandler() {
		_isNavExpanded = Nav.getAttribute('aria-expanded');

		if (document.body.clientWidth <= 600) {
			_screenWidth = 'narrow';
		} else {
			_screenWidth = 'wide';
		}

		if (_screenWidth === 'narrow' && _isNavExpanded === 'true') {
			setCollapsedNavAttributes();
			return;
		}

		if (_screenWidth === 'wide') {
			if (_isContentFrozen === true) {
				freezeContent('thaw');
			} else if (_isNavExpanded === 'false') {
				setExpandedNavAttributes();
			}
		}
	}

	function getNavAnimDuration() {
		_navAnimDuration =
			Number(
				window
					.getComputedStyle(Nav)
					.getPropertyValue('transition-duration')
					.replace(/[^0-9\.]+/g, '')
			) * 1000;

		// fix for Safari bug | rel:1
		if (browserDetect() === 'safari') {
			_navAnimDuration = 300;
		}
	}

	function setExpandedNavAttributes() {
		clearTimeout(_navAnimTimer);
		Nav.setAttribute('aria-expanded', 'true');
		NavPanel.removeAttribute('aria-hidden');
		NavPanel.classList.remove('display-none');

		if (_screenWidth === 'narrow') {
			freezeContent();
		}
	}

	function setCollapsedNavAttributes() {
		Nav.setAttribute('aria-expanded', 'false');
		NavPanel.setAttribute('aria-hidden', 'true');
		freezeContent('thaw');

		_navAnimTimer = setTimeout(() => {
			NavPanel.classList.add('display-none');
		}, _navAnimDuration);
	}

	function freezeContent(action = '') {
		if (action === '') {
			window.addEventListener('scroll', attributeToggler);
			Main.addEventListener('click', attributeToggler);

			// freeze content elements' dimensions
			const freezeWidth = Main.scrollWidth.toString();
			PrimaryGrid.style.gridTemplateColumns = `auto ${freezeWidth}px`;
			Main.setAttribute('aria-hidden', 'true');
			Footer.setAttribute('aria-hidden', 'true');
			_isContentFrozen = true;
		} else if (action === 'thaw') {
			window.removeEventListener('scroll', attributeToggler);
			Main.removeEventListener('click', attributeToggler);

			Main.removeAttribute('aria-hidden');
			Footer.removeAttribute('aria-hidden');

			_navAnimTimer = setTimeout(() => {
				PrimaryGrid.removeAttribute('style');
			}, _navAnimDuration);
			_isContentFrozen = false;
		}
	}

	function attributeToggler() {
		_isNavExpanded = Nav.getAttribute('aria-expanded');

		if (_isNavExpanded === 'true') {
			setCollapsedNavAttributes();
		} else {
			setExpandedNavAttributes();
		}
	}

	function navLinkClickHandler(e) {
		e.preventDefault();
		const destinationHref = e.target.closest('a').getAttribute('href');

		// scroll to top & end function if current page is selected
		if (destinationHref === window.location.pathname) {
			if (_screenWidth === 'narrow') {
				setCollapsedNavAttributes();
				_navAnimTimer = setTimeout(() => {
					window.scrollTo(0, 0);
				}, _navAnimDuration);
				return;
			} else {
				window.scrollTo(0, 0);
				return;
			}
		}

		// add aria-current attribute/styling to destination nav link immediately upon selection
		NavLinks.forEach((link) => {
			if (link.getAttribute('href') === destinationHref) {
				link.setAttribute('aria-current', 'page');
			} else {
				link.removeAttribute('aria-current');
			}
		});

		// collapse nav w/o triggering other animations caused by setCollapsedNavAttributes()
		if (_screenWidth === 'narrow') {
			Nav.style.width = '0px';
		}

		// trigger unmount animation for content
		Main.classList.add('anim-unmount');
		Footer.classList.add('anim-unmount');
		Crumbs.classList.add('anim-unmount');

		// direct browser to destination href
		setTimeout(() => {
			window.location.href = destinationHref;
		}, _navAnimDuration);
	}

	function genericLinkHandler(e) {
		e.preventDefault();
		const destinationHref = e.target.closest('a').getAttribute('href');

		// trigger unmount animation for content
		Main.classList.add('anim-unmount');
		Footer.classList.add('anim-unmount');

		// direct browser to destination href
		setTimeout(() => {
			window.location.href = destinationHref;
		}, _navAnimDuration);
	}

	function cacheCheck(e) {
		if (!e.persisted) {
			return;
		}

		// remove cached styling from previous unmount
		setCurrentNavLink();
		mediaQueryHandler();
		Nav.removeAttribute('style');
		Main.classList.remove('anim-unmount');
		Footer.classList.remove('anim-unmount');
		Crumbs.classList.remove('anim-unmount');
	}
</script>
